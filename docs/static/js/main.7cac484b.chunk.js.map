{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","images","title","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAe7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,OACE,sBAAMC,SAZa,SAAEC,GACrBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAe,MAOjB,SACE,uBACEO,KAAO,OACPC,YAAc,oCACdC,MAAUV,EACVW,SArBoB,SAAER,GAC1BF,EAAeE,EAAES,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,8DAIFI,MAAOF,GAJL,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAK,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,OAE5B,MAAO,CACLD,GAAIA,EACJE,MAJ8C,EAAZA,MAKlCV,IAAMS,EAAOE,iBAAiBX,QAZb,kBAgBdM,GAhBc,4CAAH,sDCEPM,EAAc,SAAC,GAAsB,IAAnBF,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEpC,OACE,sBAAKa,UAAY,6CAAjB,UACE,qBAAKC,IAAQd,EAAMe,IAAQL,IAC3B,kCAAMA,EAAN,WCFOM,EAAW,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAE1B,ECJ0B,SAAEA,GAE5B,MAA0Bf,mBAAU,CAClCsB,KAAM,GACNY,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACTvB,EAASC,GACNuB,MAAM,SAAAC,GACLH,EAAS,CACPd,KAAMiB,EACNL,SAAS,SAGd,CAAEnB,IAEEoB,EDb0BK,CAAczB,GAAlCW,EAAb,EAAQJ,KAAaY,EAArB,EAAqBA,QAErB,OACE,qCACE,mCAAOnB,EAAP,OAEEmB,GAAW,4CAEb,qBAAKJ,UAAY,YAAjB,SAGIJ,EAAOF,KAAK,SAAEiB,GAAF,OAER,cAAC,EAAD,eAEOA,GADGA,EAAIhB,aEhBfiB,EAAe,WAE1B,MAAoC1C,mBAAU,CAAC,oBAA/C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACE,qCACE,8CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEGS,EAAWgB,KAAK,SAAAT,GAAQ,OACvB,cAAC,EAAD,CAEEA,SAAaA,GADLA,Y,MCbpB4B,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.7cac484b.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n  \n  const handleInputChange = ( e ) => {\n    setInputValue( e.target.value );\n  }\n\n  const handleSubmit = ( e ) => {\n    e.preventDefault(); //para que no realice el evento por defecto del formulario\n    \n    if ( inputValue.trim().length > 2  ) {\n      setCategories( categories => [ inputValue, ...categories ] );\n      setInputValue( '' );\n    }\n  }\n\n  const [inputValue, setInputValue] = useState('')\n\n  return (\n    <form onSubmit = { handleSubmit } >\n      <input \n        type = \"text\"\n        placeholder = \"Introduzca una nueva categorÃ­a\"\n        value = { inputValue}\n        onChange = { handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\n","export const getGifs = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=5&api_key=ovLQe0MSYuhnYn9tGgoaGtlTHlBuKl6o`;\n\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n  \n  const gifs = data.map( ({ id, images, title }) => {\n  \n    return {\n      id: id,\n      title: title,\n      url:  images.downsized_medium.url,\n    }\n  })\n  \n  return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n  \n  return (\n    <div className = 'card animate__animated animate__fadeInLeft'>\n      <img src = { url } alt = { title }/>\n      <p> { title } </p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GiftGrid = ( { category } ) => {\n  \n  const { data:images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3> { category } </h3>\n\n      { loading && <p>Cargando...</p> }\n\n      <div className = \"card-grid\">\n        \n        { \n          images.map( ( img ) => \n            (\n              <GifGridItem \n                key = { img.id }\n                { ...img }\n              />\n            ))\n        }\n        \n      </div>\n    </>\n  )\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = ( category ) => {\n  \n  const [state, setState] = useState( {\n    data: [],\n    loading: true     \n  })\n\n  useEffect( () => {\n    getGifs( category )\n      .then( imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        })\n      })\n  }, [ category ]) \n\n  return state; //{ data:[], loading:true }\n}\n","import { useState } from \"react\";\n\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GiftGrid } from \"./components/GiftGrid\";\n\nexport const GifExpertApp = () => {\n  \n  const [categories, setCategories] = useState( ['Assassins Creed'] );\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      \n      <AddCategory setCategories = { setCategories } />\n      <hr />\n\n      <ol>\n       {\n         categories.map( category => (\n          <GiftGrid \n            key = { category }\n            category = { category }\n          />\n         ))\n       }\n      </ol>\n    </>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root')\n);"],"sourceRoot":""}